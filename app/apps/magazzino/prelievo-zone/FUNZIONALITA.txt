================================================================================
ANALISI FUNZIONALITÀ APP "PRELIEVO PER ZONE"
File originale: apps/magazzino/prelievo-zone/prelievo-per-zone.html
================================================================================

## CONFIGURAZIONE E COSTANTI
[ ] CONFIG oggetto con impostazioni QR_VERIFICATION, COLLAPSE_ON_COMPLETE, AUTO_NEXT
[ ] ZONES - 4 zone operative (secco, secco_sopra, pingu, frigo) con colori dedicati
[ ] Persistenza configurazioni in localStorage

## GESTIONE STATO APPLICAZIONE
[ ] currentBatchId - batch attualmente selezionato
[ ] currentZone - zona attualmente attiva
[ ] currentSublocationId - sotto-ubicazione corrente
[ ] currentOperations - operazioni da completare
[ ] pickingNotesMap - mappa note di picking
[ ] workStats - statistiche di lavoro (zone completate, operazioni, tempo)

## FUNZIONI DI CONNESSIONE ODOO
[ ] checkConnection() - verifica connessione con Odoo
[ ] callKw() - chiamate generiche API Odoo
[ ] searchRead() - ricerca e lettura record Odoo
[ ] getCSRF() - gestione token CSRF per sicurezza

## GESTIONE BATCH
[ ] loadBatches() - carica lista batch disponibili
[ ] selectBatch() - seleziona un batch specifico
[ ] Visualizzazione info batch (autista, numero ordini, stato)
[ ] refreshBatch() - aggiorna dati del batch corrente

## GESTIONE ZONE
[ ] loadZones() - carica e visualizza zone disponibili
[ ] selectZone() - seleziona zona di lavoro
[ ] setZoneColors() - imposta colori tema per zona
[ ] checkIfAllZoneCompleted() - verifica completamento zona
[ ] Contatori zone completate e operazioni

## GESTIONE SOTTO-UBICAZIONI
[ ] loadSublocations() - carica sotto-ubicazioni della zona
[ ] selectSublocation() - seleziona sotto-ubicazione
[ ] checkIfLocationCompleted() - verifica completamento ubicazione
[ ] scrollToNextIncompleteLocation() - auto-scroll a prossima ubicazione

## GESTIONE OPERAZIONI/PRODOTTI
[ ] loadOperations() - carica operazioni per ubicazione
[ ] updateOperation() - aggiorna quantità prelevata
[ ] completeOperation() - completa singola operazione
[ ] validateOperation() - valida operazione con stock.move.line
[ ] scrollToFirstIncompleteProduct() - scroll al primo prodotto incompleto
[ ] scrollToNextIncompleteProduct() - scroll al prossimo prodotto

## SCANNER QR/BARCODE
[ ] initScanner() - inizializza scanner camera
[ ] startScanning() - avvia scanner per prodotto/ubicazione
[ ] stopScanning() - ferma scanner
[ ] switchCamera() - cambia camera front/back
[ ] handleScanResult() - gestisce risultato scansione
[ ] CONFIG.QR_VERIFICATION - toggle verifica QR obbligatoria

## INTERFACCIA TASTIERA NUMERICA
[ ] openKeyboard() - apre tastiera per input quantità
[ ] closeKeyboard() - chiude tastiera
[ ] handleKeyboardInput() - gestisce input numerico
[ ] handleKeyboardConfirm() - conferma quantità inserita
[ ] handleKeyboardKey() - gestione singolo tasto

## GESTIONE UI E ANIMAZIONI
[ ] toggleTopbar() - espandi/comprimi topbar
[ ] updateCollapsedInfo() - aggiorna info topbar compressa
[ ] showToast() - mostra notifiche toast
[ ] updateConnectionStatus() - aggiorna stato connessione
[ ] initTheme() - inizializza tema dark/light
[ ] toggleTheme() - cambia tema

## STATISTICHE E CONTATORI
[ ] updateStats() - aggiorna statistiche di lavoro
[ ] Conteggio zone completate
[ ] Conteggio operazioni totali/completate
[ ] Timer per tempo di lavoro
[ ] operationStartTimes - tracciamento tempi operazioni

## DEBUG E LOGGING
[ ] debugPrint() - log debug con livelli
[ ] logRPC() - log chiamate RPC
[ ] updateDebugPanel() - aggiorna pannello debug
[ ] toggleDebugPanel() - mostra/nascondi debug
[ ] debugLog array - storico log
[ ] rpcLog array - storico chiamate RPC

## CACHE E OTTIMIZZAZIONI
[ ] movesCache - cache movimenti stock
[ ] linesCache - cache linee movimento
[ ] linesByMove - mappatura linee per movimento
[ ] doneByMove - mappatura quantità completate
[ ] metaByMove - metadata movimenti

## GESTIONE ERRORI
[ ] Try-catch su tutte le chiamate Odoo
[ ] Gestione errori di connessione
[ ] Fallback su errori scanner
[ ] Notifiche errore user-friendly

## FEATURES PWA
[ ] Service Worker per offline
[ ] Manifest per installazione
[ ] Meta tags per mobile app
[ ] Viewport optimization
[ ] Touch-friendly UI

## RESPONSIVE DESIGN
[ ] Layout mobile-first
[ ] Breakpoint per tablet/desktop
[ ] Touch gestures support
[ ] Scroll ottimizzato per mobile

## PERSISTENZA DATI
[ ] localStorage per preferenze utente
[ ] Salvataggio stato QR verification
[ ] Salvataggio tema selezionato
[ ] Salvataggio nome utente
[ ] Salvataggio stato topbar

## AUTO-COMPLETAMENTO E NAVIGAZIONE
[ ] CONFIG.AUTO_NEXT - auto-avanzamento
[ ] CONFIG.COLLAPSE_ON_COMPLETE - auto-comprimi completati
[ ] Smart scroll a elementi incompleti
[ ] Focus management per input

## GESTIONE NOTE E DETTAGLI
[ ] pickingNotesMap per note ordini
[ ] Visualizzazione note prodotto
[ ] Dettagli lotto/scadenza
[ ] Info cliente su operazioni

## VALIDAZIONE E CONFERME
[ ] Conferma quantità prima di salvare
[ ] Validazione QR se abilitato
[ ] Controllo stock disponibile
[ ] Alert su discrepanze quantità

================================================================================
COMPONENTI DA CREARE IN REACT:
================================================================================

1. app/prelievo-zone/page.tsx - Pagina principale
2. components/prelievo-zone/BatchSelector.tsx - Selezione batch
3. components/prelievo-zone/ZoneSelector.tsx - Selezione zone
4. components/prelievo-zone/LocationList.tsx - Lista ubicazioni
5. components/prelievo-zone/OperationList.tsx - Lista operazioni/prodotti
6. components/prelievo-zone/QRScanner.tsx - Scanner QR/barcode
7. components/prelievo-zone/NumericKeyboard.tsx - Tastiera numerica
8. components/prelievo-zone/StatsPanel.tsx - Pannello statistiche
9. components/prelievo-zone/ConnectionStatus.tsx - Stato connessione
10. components/prelievo-zone/DebugPanel.tsx - Pannello debug (dev only)
11. lib/odoo/pickingClient.ts - Client Odoo per picking
12. lib/store/pickingStore.ts - State management Zustand
13. lib/types/picking.ts - TypeScript types

================================================================================
WORKFLOW DI SVILUPPO E TEST:
================================================================================

1. RIFERIMENTI:
   - Usare app/inventario come riferimento per struttura e pattern
   - Copiare pattern di componenti già funzionanti
   - Mantenere stesso stile di codice

2. SVILUPPO:
   - Creare componenti uno alla volta
   - Testare ogni componente prima di procedere
   - Verificare imports e dipendenze

3. TEST CONTINUO:
   - Dopo OGNI modifica significativa: npm run dev
   - Verificare che Vercel non abbia errori
   - Se errori: FERMARSI, RIPARARE, poi continuare

4. COMMIT:
   - Fare commit quando una feature è completa
   - Messaggio commit descrittivo
   - git add . && git commit -m "feat: [descrizione]"

5. VERIFICA VERCEL:
   - Controllare sempre console per errori TypeScript
   - Verificare che build passi: npm run build
   - Test su browser: http://localhost:3000/prelievo-zone

6. RIPARAZIONE ERRORI:
   - Se errore TypeScript: controllare types
   - Se errore import: verificare percorsi
   - Se errore runtime: controllare console browser
   - SEMPRE riparare prima di continuare

================================================================================
NOTE IMPLEMENTAZIONE:
================================================================================

- Usare Framer Motion per animazioni fluide
- Implementare con Zustand per state management globale
- Mantenere cache locale per performance
- Supporto offline con service worker
- Ottimizzare per scanner hardware (focus management)
- Mantenere compatibilità con sistema Odoo esistente
- UI consistente con design system esistente
- Test su dispositivi mobili reali