import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { getOdooSessionId } from '@/lib/odoo/odoo-helper';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

export async function POST(request: NextRequest) {
  try {
    const sessionId = await getOdooSessionId();
    if (!sessionId) {
      return NextResponse.json(
        { success: false, error: 'Sessione non valida. Effettua il login.' },
        { status: 401 }
      );
    }

    const { productName, productDescription, productId } = await request.json();

    if (!productName) {
      return NextResponse.json(
        { success: false, error: 'Nome prodotto mancante' },
        { status: 400 }
      );
    }

    console.log('üé® Generating product image with Gemini 2.5 Flash Image for:', productName);

    // Use Gemini 2.5 Flash Image model for image generation
    const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image' });

    // Create the perfect prompt for product photography
    const imagePrompt = `Professional product photography of ${productName}. ${productDescription || ''}. Clean white background, e-commerce style, well-lit, centered, high quality, studio lighting, detailed, sharp focus, commercial photo.`;

    console.log('üìù Generating image with prompt:', imagePrompt);

    // Generate image with Gemini 2.5 Flash Image
    const result = await model.generateContent({
      contents: [{
        role: 'user',
        parts: [{
          text: imagePrompt
        }]
      }]
    });

    const response = result.response;

    // Check if image was generated
    if (!response || !response.candidates || response.candidates.length === 0) {
      console.error('‚ùå No image generated by Gemini');
      return NextResponse.json({
        success: false,
        error: 'Nessuna immagine generata da Gemini'
      }, { status: 500 });
    }

    // Extract image data from response
    // Gemini 2.5 Flash Image returns images inline in the response
    const candidate = response.candidates[0];
    const parts = candidate.content?.parts || [];

    let imageBase64 = null;
    let imageMimeType = null;

    // Find the image part in the response
    for (const part of parts) {
      if (part.inlineData && part.inlineData.data) {
        imageBase64 = part.inlineData.data;
        imageMimeType = part.inlineData.mimeType;
        break;
      }
    }

    if (!imageBase64) {
      console.error('‚ùå No image data found in Gemini response');
      return NextResponse.json({
        success: false,
        error: 'Dati immagine non trovati nella risposta di Gemini'
      }, { status: 500 });
    }

    console.log('‚úÖ Image generated successfully with Gemini 2.5 Flash Image');
    console.log('üìä Image format:', imageMimeType);

    // If productId is provided, upload to Odoo
    if (productId) {
      try {
        console.log(`üì§ Uploading image to Odoo product ${productId}`);

        const odooUrl = process.env.ODOO_URL;

        // Update product with image
        const updateResponse = await fetch(`${odooUrl}/web/dataset/call_kw`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Cookie': `session_id=${sessionId}`
          },
          body: JSON.stringify({
            jsonrpc: '2.0',
            method: 'call',
            params: {
              model: 'product.product',
              method: 'write',
              args: [
                [productId],
                { image_1920: imageBase64 }
              ],
              kwargs: {},
            },
            id: Math.floor(Math.random() * 1000000000)
          })
        });

        const updateData = await updateResponse.json();

        if (updateData.error) {
          console.error('‚ö†Ô∏è Error updating product image in Odoo:', updateData.error);
        } else {
          console.log('‚úÖ Product image uploaded to Odoo successfully');
        }
      } catch (odooError) {
        console.error('‚ö†Ô∏è Failed to upload image to Odoo:', odooError);
      }
    }

    return NextResponse.json({
      success: true,
      message: 'Immagine generata con successo con Gemini 2.5 Flash Image',
      imageBase64: imageBase64,
      mimeType: imageMimeType,
      uploaded: !!productId
    });

  } catch (error: any) {
    console.error('‚ùå Error generating image with Gemini:', error);
    return NextResponse.json(
      {
        success: false,
        error: error.message || 'Errore durante la generazione dell\'immagine'
      },
      { status: 500 }
    );
  }
}
