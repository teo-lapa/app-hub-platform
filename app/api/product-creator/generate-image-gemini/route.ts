import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import sharp from 'sharp';
import path from 'path';
import fs from 'fs';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

export async function POST(request: NextRequest) {
  try {
    const { productName, productDescription, productId } = await request.json();

    if (!productName) {
      return NextResponse.json(
        { success: false, error: 'Nome prodotto mancante' },
        { status: 400 }
      );
    }

    console.log('üé® Generating product image with Gemini 2.5 Flash Image for:', productName);

    // Use Gemini 2.5 Flash Image model for image generation
    const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash-image' });

    // Create the perfect prompt for product photography
    const imagePrompt = `Professional product photography of ${productName}. ${productDescription || ''}. Clean white background, e-commerce style, well-lit, centered, high quality, studio lighting, detailed, sharp focus, commercial photo.`;

    console.log('üìù Generating image with prompt:', imagePrompt);

    // Generate image with Gemini 2.5 Flash Image
    const result = await model.generateContent({
      contents: [{
        role: 'user',
        parts: [{
          text: imagePrompt
        }]
      }]
    });

    const response = result.response;

    // Check if image was generated
    if (!response || !response.candidates || response.candidates.length === 0) {
      console.error('‚ùå No image generated by Gemini');
      return NextResponse.json({
        success: false,
        error: 'Nessuna immagine generata da Gemini'
      }, { status: 500 });
    }

    // Extract image data from response
    // Gemini 2.5 Flash Image returns images inline in the response
    const candidate = response.candidates[0];
    const parts = candidate.content?.parts || [];

    let imageBase64 = null;
    let imageMimeType = null;

    // Find the image part in the response
    for (const part of parts) {
      if (part.inlineData && part.inlineData.data) {
        imageBase64 = part.inlineData.data;
        imageMimeType = part.inlineData.mimeType;
        break;
      }
    }

    if (!imageBase64) {
      console.error('‚ùå No image data found in Gemini response');
      return NextResponse.json({
        success: false,
        error: 'Dati immagine non trovati nella risposta di Gemini'
      }, { status: 500 });
    }

    console.log('‚úÖ Image generated successfully with Gemini 2.5 Flash Image');
    console.log('üìä Image format:', imageMimeType);

    // Apply watermark (logo) to the image
    try {
      console.log('üè∑Ô∏è Adding LAPA logo watermark...');

      // Convert base64 to buffer
      const imageBuffer = Buffer.from(imageBase64, 'base64');

      // Load logo from public folder
      const logoPath = path.join(process.cwd(), 'public', 'logo-lapa.png');

      if (fs.existsSync(logoPath)) {
        // Get image dimensions
        const imageMetadata = await sharp(imageBuffer).metadata();
        const imageWidth = imageMetadata.width || 1024;
        const imageHeight = imageMetadata.height || 1024;

        // Calculate logo size (15% of image width)
        const logoWidth = Math.floor(imageWidth * 0.15);

        // Resize logo
        const resizedLogo = await sharp(logoPath)
          .resize(logoWidth, null, {
            fit: 'contain',
            background: { r: 0, g: 0, b: 0, alpha: 0 }
          })
          .toBuffer();

        // Get resized logo dimensions
        const logoMetadata = await sharp(resizedLogo).metadata();
        const logoHeight = logoMetadata.height || 0;

        // Position: bottom-right with 20px margin
        const watermarkedImage = await sharp(imageBuffer)
          .composite([{
            input: resizedLogo,
            top: imageHeight - logoHeight - 20,
            left: imageWidth - logoWidth - 20,
            blend: 'over'
          }])
          .toBuffer();

        // Convert back to base64
        imageBase64 = watermarkedImage.toString('base64');

        console.log('‚úÖ Logo watermark applied successfully');
      } else {
        console.warn('‚ö†Ô∏è Logo file not found at:', logoPath);
      }
    } catch (watermarkError) {
      console.error('‚ö†Ô∏è Error applying watermark:', watermarkError);
      // Continue without watermark if there's an error
    }

    // If productId is provided, upload to Odoo
    if (productId) {
      try {
        console.log(`üì§ Uploading image to Odoo product ${productId}`);

        const odooUrl = process.env.ODOO_URL;
        const odooDb = process.env.ODOO_DB;

        // Authenticate
        const authResponse = await fetch(`${odooUrl}/web/session/authenticate`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            jsonrpc: '2.0',
            method: 'call',
            params: {
              db: odooDb,
              login: 'paul@lapa.ch',
              password: 'lapa201180'
            },
            id: 1
          })
        });

        const authData = await authResponse.json();
        if (authData.error) {
          throw new Error('Odoo authentication failed');
        }

        const cookies = authResponse.headers.get('set-cookie');

        // Update product with image
        const updateResponse = await fetch(`${odooUrl}/web/dataset/call_kw`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Cookie': cookies || ''
          },
          body: JSON.stringify({
            jsonrpc: '2.0',
            method: 'call',
            params: {
              model: 'product.product',
              method: 'write',
              args: [
                [productId],
                { image_1920: imageBase64 }
              ],
              kwargs: {},
            },
            id: Math.floor(Math.random() * 1000000000)
          })
        });

        const updateData = await updateResponse.json();

        if (updateData.error) {
          console.error('‚ö†Ô∏è Error updating product image in Odoo:', updateData.error);
        } else {
          console.log('‚úÖ Product image uploaded to Odoo successfully');
        }
      } catch (odooError) {
        console.error('‚ö†Ô∏è Failed to upload image to Odoo:', odooError);
      }
    }

    return NextResponse.json({
      success: true,
      message: 'Immagine generata con successo con Gemini 2.5 Flash Image',
      imageBase64: imageBase64,
      mimeType: imageMimeType,
      uploaded: !!productId
    });

  } catch (error: any) {
    console.error('‚ùå Error generating image with Gemini:', error);
    return NextResponse.json(
      {
        success: false,
        error: error.message || 'Errore durante la generazione dell\'immagine'
      },
      { status: 500 }
    );
  }
}
